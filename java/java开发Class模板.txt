#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "") package ${PACKAGE_NAME};#end
#parse("File Header.java")
public class ${NAME}{
    private Integer Id;
    private String xx;
    private float xx1;
}
===========================================
事务--注解的实现方式(实话中小项目)
===========================================
    @Transactional(
            //传播方式
            propagation = Propagation.REQUIRED,
            //默认级别
            isolation = Isolation.DEFAULT,
            //是否只读
            readOnly = false,
            //回滚类
            rollbackFor = {
//                    异常类，表示发生指定的异常一定回滚
                    NullPointerException.class,
                    NotEnoughException.class
            }
    )
public void buyGoods(Integer xx, Integer xx1){
    code context
}
===========================================
事务--AOP的实现方式-xml(适合大型项目)
=========================================== 
在代码中只需要写业务代码即可，不需要注释
事务的实现全部在XML配置文件中，具体可看xml模板

=========================================== 
容器对象
=========================================== 
web项目中容器对象只需要创建一次，把容器对象放入全局作用域ServletContext中。
实现：
创建监听器，当全局对象被创建时存入ServletContext

创建监听器的代码：
public class YourServlet extends HttpServlet
{
    ***
    业务代码
    ***
    //        自己实现的监听器
    WebApplicationContext ac=null;
    -------------------------------------------------------------------------
    String key=WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;
    Object ctx=getServletContext().getAttribute(key);
    System.out.println(ctx);
    if (ctx!=null){
        ac=(WebApplicationContext)ctx;
    }
    -------------------------------------------------------------------------
    //        使用框架的工具方法创建监听器
    ServletContext sc=getServletContext();
    ac= WebApplicationContextUtils.getRequiredWebApplicationContext(sc);
    -------------------------------------------------------------------------
    YourService service= (YourService) ac.getBean("yourBeanName");
    ***
    业务代码
    ***

    request.getRequestDispatcher("/result.jsp").forward(request,response); //页面跳转
}