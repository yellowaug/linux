全系列常用
==========================================================================================================
查看内存占用前10名的程序
ps aux | sort -k4,4nr | head -n 10

==========================================================================================================
CentOS7系列
==========================================================================================================
更新yum
先备份原文件：mv /etc/yum.repos.d/CentOS6-Base.repo CentOS6-Base.repo.bak
下载yum源：wget http://mirrors.163.com/.help/CentOS6-Base-163.repo
替换yum源：mv  CentOS6-Base-163.repo  CentOS6-Base.repo
执行完yum makecache命令，即可正常使用了。

查看已安装的程序
yum list installed

==========================================================================================================
Cent7 部署ceph分布式硬盘集群 https://blog.csdn.net/aixiaoyang168/article/details/78788703
==========================================================================================================
sudo yum install -y yum-utils && 
sudo yum-config-manager --add-repo https://dl.fedoraproject.org/pub/epel/7/x86_64/ && 
sudo yum install --nogpgcheck -y epel-release && 
sudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7 && 
sudo rm /etc/yum.repos.d/dl.fedoraproject.org*


==========================================================================================================
网络IP设置
==========================================================================================================
CentOS6.8设置
linux 与 linux互传文件
yum install openssh-clients -y
格式 scp -r $源文件主机用户名@$源文件主机:$源文件路径 $下载路径
例子 scp -r root@10.11.10.16:/home/vmiso/debian-9.8.0-amd64-DVD-1.iso /home/vmiso/ 
	 scp -r root@192.168.15.251:/home/redisrun.sh /home/
	 scp -r root@192.168.16.250:/root/.vim /root

设置SSH
设置SSH开机启动
chkconfig --level 2345 sshd on
chkconfig sshd on
chkconfig --list sshd
修改配置文件
vim /etc/ssh/sshd_config
修改运行ROOT登录
==========================================================================================================
树莓派（Debian版本）设置固定IP地址
==========================================================================================================
路径：vi /etc/dhcpcd.conf

更改内容：
# Example static IP configuration:
interface eth0
static ip_address=10.11.10.170/24
#static ip6_address=fd51:42f8:caae:d92e::ff/64
static routers=10.11.10.254
static domain_name_servers=10.12.2.250
==========================================================================================================
centos6设置固定IP
查看IP配置文件
cd /etc/sysconfig/network-scripts
在VM中发现与网上说的不太一样
没有ifcfg-eth0,只有ifcfg-lo
修复方法
创建ifcfg-eth0文件 vim /etc/sysconfig/network-scripts/ifcfg-eth0
复制以下内容：
DEVICE=eth0
BOOTPROTO=static
IPADDR=192.168.15.239	
NETMASK=255.255.255.0
GATEWAY=192.168.15.1
DNS1=202.103.224.68
DNS2=114.114.114.114
IPV6INIT=no
HWADDR=00:0C:29:50:01:D1
NM_COnTROLLED=no      
ONBOOT=yes
TYPE=Ethernet：

获取Hwaddr
ifconfig
切换网络工作模式：
设置开机启动network
chkconfig network on
启动network
service network start
停止networkmanager
chkconfig networkmanager off
service networkmanager stop
重启机器，查看配置是否成功
更改DNS
vim /etc/resolv.conf
更改为 202.103.224.68
==========================================================================================================
安装JDK，Mysql的方法
==========================================================================================================
centos6.8 安装JDK1.8解压版
先去官网下个JDK
解压tar.gz包：
tar -zxvf jdkxxx.tar.gz
配置环境变量：
vim /etc/profile
在文件末端添加以下内容：
JAVA_HOME=/home/tool/jdk1.8.0_161
JRE_HOME=/home/tool/jdk1.8.0_161/jre
CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib
PATH=$JAVA_HOME/bin:$PATH
export PATH JAVA_HOME CLASSPATH
保持退出后并编译
source /etc/profile

centos6.8 解压安装mysql5.6
2、卸载系统自带的Mariadb
rpm -qa|grep mariadb         //查询出已安装的mariadb
rpm -e --nodeps 文件名      //卸载 ， 文件名为使用rpm -qa|grep mariadb 命令查出的所有文件
3、删除etc目录下的my.cnf文件
       rm /etc/my.cnf
4、 执行以下命令来创建mysql用户组
groupadd mysql
5、执行以下命令来创建一个用户名为mysql的用户并加入mysql用户组
useradd -g mysql mysql
6、将下载的二进制压缩包放到/usr/local/目录下。
7、解压安装包
tar -zxvfmysql-5.6.36-linux-glibc2.5-x86_64.tar.gz
8、将解压好的文件夹重命名为mysql
9、在etc下新建配置文件my.cnf，并在该文件内添加以下代码：
[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8
socket=/var/lib/mysql/mysql.sock
[mysqld]
skip-grant-tables #跳过密码登录，用于初次登录，后面记得删掉
skip-name-resolve
#设置3306端口
port=3306
socket=/var/lib/mysql/mysql.sock
# 设置mysql的安装目录
basedir=/usr/local/mysql
# 设置mysql数据库的数据的存放目录
datadir=/usr/local/mysql/data
# 允许最大连接数
max_connections=200
# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8
# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
lower_case_table_names=1
max_allowed_packet=16M
10、创建步骤9中用到的目录并将其用户设置为mysql
mkdir /var/lib/mysql
mkdir /var/lib/mysql/mysql
chown -R mysql:mysql /var/lib/mysql
chown -R mysql:mysql /var/lib/mysql/mysql
11、进入安装mysql软件目录
cd /usr/local/mysql
chown -R mysql:mysql ./　　                             #修改当前目录拥有者为mysql用户
./scripts/mysql_install_db --user=mysql         #安装数据库
bin/mysqld --initialize --user=mysql --basedir=/home/tools/mysql57 --datadir=/home/tools/mysql57/data #5.7版本用这个命令
chown -R mysql:mysql data                              #修改当前data目录拥有者为mysql用户
 
到此数据库安装完毕！

二、配置MySQL
1、授予my.cnf的最大权限。
chown 777 /etc/my.cnf
设置开机自启动服务控制脚本：
2、复制启动脚本到资源目录
cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld
3、增加mysqld服务控制脚本执行权限
chmod +x /etc/rc.d/init.d/mysqld
4、将mysqld服务加入到系统服务
chkconfig --add mysqld
5、检查mysqld服务是否已经生效
chkconfig --list mysqld
命令输出类似下面的结果：
mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off
表明mysqld服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用service命令控制mysql的启动和停止。
6、启动msql（停止mysqld服务：service mysqld stop）
service mysqld start
7、将mysql的bin目录加入PATH环境变量，编辑/etc/profile文件
vi /etc/profile
在文件最后添加如下信息：
export PATH=$PATH:/usr/local/mysql/bin
执行下面的命令使所做的更改生效：
. /etc/profile
8、以root账户登陆mysql，默认是没有密码
mysql -u root -p
如果是第一次登录mysql,执行以下命令行
set passwrod = 'new password';
9、设置root账户密码 注意下面的you password改成你的要修改的密码（记住，这里只是允许本机连接，配置成%即是允许多个ip连接上来）
use mysql
update user set password=password('hjc') where user='root'and host='localhost';
update mysql.user set authentication_string=password('hjc') where user='root' ;
10、设置远程主机登录，注意下面的your username 和 your password改成你需要设置的用户和密码
GRANT ALL PRIVILEGES ON *.* TO'root'@'%' IDENTIFIED BY 'hjc' WITH GRANT OPTION;
FLUSH PRIVILEGES ;
11、如果登录不上了，在[mysqld]的段中加上一句：skip-grant-tables 保存并且退出vi

安装上传以及下载工具
yum install -y lrzsz
http://repo.zabbix.com/zabbix/3.4/rhel/6/x86_64/zabbix-agent-3.4.0-1.el6.x86_64.rpm

==========================================================================================================
tomcat的安装方法
==========================================================================================================
下载地址：http://tomcat.apache.org/download-80.cgi
安装前提
系统必须已安装配置JDK8
（1）解压                  
 tar -zxvf apache-tomcat-8.0.44.tar.gz  
 # 解压成功后得到 apache-tomcat-8.0.44 文件夹，更名为tomcat7
 mv apache-tomcat-8.0.44 tomcat8
 （2）配置环境变量
 vim  ~/.bashrc 
 #在文件最后加上以下配置
 #tomcat evn
 CATALINA_HOME=/home/austin/bin/tomcat8
 export CATALINA_HOME
 #保存 退出后执行下面的命令,使其生效
 source ~/.bashrc

（3）配置tomcat的catalina.sh文件
 #进入tomcat的安装目录
 cd /home/austin/bin/tomcat8/bin
 vi catalina.sh
 
 #找到 # OS specific support，然后在这行下面添加以下配置
 # OS specific support.  $var _must_ be set to either true or false.
 CATALINA_HOME=/home/austin/bin/tomcat8
 JAVA_HOME=/home/austin/bin/jdk1.8.0_40
 #保存退出

（4）修改默认端口号(如没有需求，可不修改)
 #进入tomcat的配置目录
 cd /home/austin/bin/tomcat8/conf
 vim server.xml

 ## 输入/8080 找到默认端口配置，修改成自定义配置

    <Connector port="8086" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    <!-- A "Connector" using the shared thread pool-->
    <!--
    <Connector executor="tomcatThreadPool"
               port="8086" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    -->

（5）安装tomcat服务（可选）
 ## 需要sudoer权限
 cd $CATALINA_HOME/bin 
 cp catalina.sh /etc/init.d/tomcat

（6）启动服务
 # 如果安装了tomcat服务
 # 启动
 service tomcat start
 #停用
 service tomcat stop

 # 如果未安装tomcat服务
 # 启动
 $CATALINA_HOME/bin/startup.sh 
 #停用
 $CATALINA_HOME/bin/shutdown.sh

启动成功， 命令行可看到：
 Using CATALINA_BASE:   /home/austin/bin/tomcat8
 Using CATALINA_HOME:   /home/austin/bin/tomcat8
 Using CATALINA_TMPDIR: /home/austin/bin/tomcat8/temp
 Using JRE_HOME:        /home/austin/bin/jdk1.8.0_40
 Using CLASSPATH:       /home/austin/bin/tomcat8/bin/bootstrap.jar:/home/austin/bin/tomcat8/bin/tomcat-juli.jar
 Tomcat started.

==========================================================================================================
redis的安装方法
==========================================================================================================

centos6安装redits
解压安装包 tar-zxvf /$redits-filename
安装依赖
yum install gcc-c++
进入redits文件目录：make
如果报错：
zmalloc.h:50:31: error: jemalloc/jemalloc.h: No such file or directory
zmalloc.h:55:2: error: #error "Newer version of jemalloc required"
make[1]: *** [adlist.o] Error 1
make[1]: Leaving directory `/data0/src/redis-2.6.2/src'
make: *** [all] Error 2
则运行：
make MALLOC=libc
安装完成后运行
make test 测试
运行make test 报错
You need tcl 8.5 or newer in order to run the Redis test
wget http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz 下载TCL压缩包
tar xzvf tcl8.6.1-src.tar.gz 解压
mv tcl8.6.1 /home/tool/redis 将tcl移动到redis文件内
cd /home/tool/redis4/unix 进入安装目录
sudo ./configure
sudo make
sudo make install  
配置redits
在以下目录下创建文件夹
mkdir /etc/redis
mkdir /var/redis
mkdir /var/redis/log
mkdir /var/redis/run
mkdir /var/redis/6379
在redis解压文件下复制一份配置文件到 /etc/redis下
cp redis.conf /etc/redis/6378.conf
修改配置文件6379.conf
vim /etc/redis/6378.conf
修改以下内容
daemonize yes    //将redis服务设成守护进程
requirepass 123456    //设置认证密码
bind 0.0.0.0    //设置监听所有ip，默认为bind 127.0.0.1，只监听本机ip，其他主机无法访问此redis，因为我要远程操作redis，所以暂时改成0.0.0.0
protected-mode no    //关闭保护模式，默认启用保护模式，同样要想远程访问redis，必须设成no
pidfile /var/redis/run/redis_6378.pid
logfile /var/redis/log/redis_6378.log
dir /var/redis/6379
使用6379.conf启动redis服务
redis-server /etc/redis/6379.conf
复制redis启动脚本到/etc/init.d目录
cp /home/redist-4.0.2/utlis/redis_init_script /etc/init.d/redis
需要修改的内容：
# chkconfig:   2345 90 10 #头文件加上
REDISPORT=6379
EXEC=/usr/local/bin/redis-server
#CLIEXEC=/usr/local/bin/redis-cli
CLIEXEC=/etc/redis/redis-cli
PIDFILE=/var/redis/run/redis_${REDISPORT}.pid #要修改成6379.conf一样的路径地址
CONF="/etc/redis/${REDISPORT}.conf"#要修改成6379.conf一样的路径地址
PID=$(cat $PIDFILE)
echo "Stopping ..."
$CLIEXEC -a "123456" -p $REDISPORT shutdown #在这添加上密码
while [ -x /proc/${PID} ]
do
echo "Waiting for Redis to shutdown ..."
sleep 1
done
echo "Redis stopped"
保存文件并退出
设置开机启动项
chkconfig redis on
设置防火墙
vim /etc/sysyconfig/iptables
添加一行
-A INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT
重启防火墙
service iptables restart
结束redis进程
kill -I $pid
登录redis客户端
redis-cli -h $hostip -p $hostport -a $password

配置 redis集群
创建节点目录
mkdir /usr/local/redis_cluster
mkdir -p /usr/local/redis_cluster/{7003 7004 7005}
创建7000节点为例，拷贝到7000目录
cp /home/redis-4.0.1/redis.conf  /usr/local/redis_cluster/7000/7000.conf   
拷贝到7001目录
cp /home/redis-4.0.1/redis.conf  ./redis_cluster/7001/7001.conf   
拷贝到7002目录
cp /home/redis-4.0.1/redis.conf  ./redis_cluster/7002/7002.conf  
分别对7001，7002、7003文件夹中的3个文件修改对应的配置
编辑/etc/redis/%filename.conf
修改以下内容：
daemonize    yes                          //redis后台运行
pidfile  /var/run/redis_7000.pid          //pidfile文件对应7000,7002,7003
port  7000                                //端口7000,7002,7003
cluster-enabled  yes                      //开启集群  把注释#去掉
cluster-config-file  nodes_7000.conf      //集群的配置  配置文件首次启动自动生成 7000,7001,7002
cluster-node-timeout  5000                //请求超时  设置5秒够了
appendonly  yes                           //aof日志开启  有需要就开启，它会每次写操作都记录一条日志
bing 0.0.0.0
在192.168.137.100创建3个节点：对应的端口改为7003,7004,7005.配置对应的改一下就可以了
开启redis集群
redis-server ./$prot.conf
查看redis集群是否启动成功
ps -ef | grep redis
安装ruby 
sudo yum install -y curl \
&& gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB \
&& \curl -sSL https://get.rvm.io | bash -s stable \
&& source /etc/profile.d/rvm.sh \
&& rvm install ruby-2.4.1 \
&& rvm use 2.4.1 default \
&& gem install redis
查找配置文件 find / -name rvm.sh 
配置文件生效 source /etc/profile.d/rvm.sh 
下载rvm依赖 rvm requirements 
查看rvm库ruby版本 rvm list known
安装ruby指定版本 rvm install ruby-2.4.1
使用ruby版本默认 rvm use 2.4.1 default
gem install redis
/usr/local/redis/src/redis-trib.rb create --replicas 1 \
192.168.16.235:7000 192.168.16.235:7001 192.168.16.235:7002 \
192.168.16.236:7003 192.168.16.236:7004 192.168.16.236:7005
查看节点信息
cluster info
cluster nodes
redis-cli -c -p 7000
==========================================================================================================
centos6安装openoffice
==========================================================================================================
#tar zxvf Apache_OpenOffice_4.1.2_Linux_x86-64_install-rpm_zh-CN.tar.gz

解压后的目录是zh-CN，里面有RPMS、readmes、licenses。

2、进入RPMS目录　

3、执行　rpm -ivh *rpm（安装所有rpm文件）

4、进入到RPMS/desktop-integration目录，选择安装相关的套件，我选择的是redhat

#rpm -ivh openoffice4.1.2-redhat-menus-4.1.2-9782.noarch.rpm

这时openOffice己经安装完成，默认会安装在/opt下

5、启动openOffice服务　

临时启动： /opt/openoffice4/program/soffice -headless -accept="socket,host=127.0.0.1,port=8100;urp;" -nofirststartwizard

 一直后台启动：nohup  /opt/openoffice4/program/soffice -headless -accept="socket,host=127.0.0.1,port=8100;urp;" -nofirststartwizard &

6、查看openoffice　默认的服务端口是否正常启用

# netstat -tlnp |grep 8100

tcp        0      0 127.0.0.1:8100              0.0.0.0:*                   LISTEN      56236/soffice.bin   

==========================================================================================================
centos6监控网卡流量  https://www.jianshu.com/p/b9e942f3682c
==========================================================================================================
1. sar -n DEV 1 2
sar命令包含在sysstat工具包中，提供系统的众多统计数据。其在不同的系统上命令有些差异，
某些系统提供的sar支持基于网络接口的数据统计，也可以查看设备上每秒收发包的个数和流量。
命令后面1 2 意思是：每一秒钟取1次值，取2次。
DEV显示网络接口信息
另外，-n参数很有用，他有6个不同的开关：DEV | EDEV | NFS | NFSD | SOCK | ALL ，其代表的含义如下：
DEV显示网络接口信息。
EDEV显示关于网络错误的统计数据。
NFS统计活动的NFS客户端的信息。
NFSD统计NFS服务器的信息
SOCK显示套接字信息
ALL显示所有5个开关
IFACE：LAN接口
rxpck/s：每秒钟接收的数据包
txpck/s：每秒钟发送的数据包
rxbyt/s：每秒钟接收的字节数
txbyt/s：每秒钟发送的字节数
rxcmp/s：每秒钟接收的压缩数据包
txcmp/s：每秒钟发送的压缩数据包
rxmcst/s：每秒钟接收的多播数据包
rxerr/s：每秒钟接收的坏数据包
txerr/s：每秒钟发送的坏数据包
coll/s：每秒冲突数
rxdrop/s：因为缓冲充满，每秒钟丢弃的已接收数据包数
txdrop/s：因为缓冲充满，每秒钟丢弃的已发送数据包数
txcarr/s：发送数据包时，每秒载波错误数
rxfram/s：每秒接收数据包的帧对齐错误数
rxfifo/s：接收的数据包每秒FIFO过速的错误数
txfifo/s：发送的数据包每秒FIFO过速的错误数

cat /proc/net/dev
Linux 内核提供了一种通过 /proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。
proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。
用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。
由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的。
/proc文件系统中包含了很多目录，其中/proc/net/dev 保存了网络适配器及统计信息。

 使用watch命令，配合ifconfig、more /proc/net/dev、cat /proc/net/dev来实时监控。
 比如执行 watch -n 1 "ifconfig eth0"


==========================================================================================================
debian9的安装配置以及使用
==========================================================================================================
debian9安装配置
更改更新源：
deb http://mirrors.aliyun.com/debian stretch main contrib non-free
deb http://mirrors.aliyun.com/debian stretch-proposed-updates main contrib non-free
deb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free
deb-src http://mirrors.aliyun.com/debian stretch main contrib non-free
deb-src http://mirrors.aliyun.com/debian stretch-proposed-updates main contrib non-free
deb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free
deb http://mirrors.aliyun.com/debian-security/ stretch/updates main non-free contrib
deb-src http://mirrors.aliyun.com/debian-security/ stretch/updates main non-free contrib
运行命令：
apt-get clean all && apt-get update -y && apt-get upgrade -y && apt-get install vim sudo -y

安装vim sudo
apt-get install vim sudo


解决debian9无GUI界面中文乱码问题
apt-get install locales -y && dpkg-reconfigure locales
配置编码进入选择：(空格键是选择，选择完了后Tab切换到OK，再ENTER确认）
en_US.UTF8
zh_CN GB2312
zh_CN GBK GBK
zh_CN UTF-8 UTF-8
修改locale文件
$ /etc/default/locale
LANG=en_US.UTF-8
如果还有方块需要装字体：
$ apt-get install ttf-arphic-uming
$ apt-get install ttf-wqy-zenhei
$ reboot

debian9 设置固定IP
修改/etc/network/interfaces
vim /etc/network/interfaces
修改内容：
auto lo
iface lo inet loopback
auto  enp0s31f6#网卡
iface ens3 inet static
address 10.11.10.21 
netmask 255.255.255.0
gateway 10.11.10.254
auto  eno1#双网卡设置 不用设置网关
iface eno1 inet static
address 192.168.1.112 
netmask 255.255.255.0

设置DNS
修改/etc/resolv.conf
nameserver = 202.103.224.68 //DNS1
nameserver = 114.114.114.114 //DNS2
重启服务
service networking restart
==========================================================================================================
debian9创建，配置，维护kvm虚拟机
==========================================================================================================
debian9 安装KVM并创建虚拟机
安装kvm/qemu，安装libvirt，安装vnc viewer
apt-get install -y qemu-kvm qemu uml-utilities libvirt-clients libvirt-dev virtinst libvirt-daemon-system（最后一个一定要装，网上的教程太老了，不装是无法创建虚拟机的）
安装网桥管理工具
apt-get install -y bridge-utils
加载kvm 内核
modprobe kvm
modprobe kvm-intel
lsmod | grep kvm#查看内核

设置虚拟机网络
NAT网络模式
先查看虚拟机网络
virsh net-list --all
假如不小心通过brctl（用于管理桥接网络的工具）删除了default网络，可以通过重新加载预置的XML文件来恢复：
sudo virsh net-define /usr/share/libvirt/networks/default.xml  #重新定义网络
udo virsh net-autostart default  #设置default开机自动启动
sudo virsh net-start default  #启动网络default
sudo virsh net-info default   #查看default网络信息
NAT模式下虚拟主机可以连外网，但外界无法访问该虚拟主机，其实如果你使用NAT方式上网，
可以直接不用做任何设置就可以让虚拟机上网。这些命令是为了后面设置桥接网格时有个基础，如果遇到问题也好知道从哪里下手查找问题。

配置桥接模式
vim /etc/network/interfaces
删除要桥接的相关网卡的配置，如下命所示
source /etc/network/interfaces.d/*
# The loopback network interface
auto lo
iface lo inet loopback
# The primary network interface
#allow-hotplug eno1
auto eno1
#iface eno1 inet dhcp
iface eno1 inet static
address 192.168.16.250
netmask 255.255.255.0
gateway 192.168.16.1
#auto eno2
#iface eno2 inet dhcp
auto br0
iface br0 inet dhcp
bridge_ports enp21s0
bridge_stp off
bridge_waitport 0
bridge_fd 0
重启网络服务
service networking restart
查看配置情况
ip addr 
service networking status

创建虚拟机如果报错，重启计算机即可
创建windows7 vm
virt-install \
--virt-type=kvm \
--name=szh-win-1 \ 
--ram=4096  \
--vcpus=2 \
--os-variant=windows \
--hvm \
--cdrom=/home/disk1/vmiso/cn_windows_server_2016_x64_dvd_9718765.iso \
--network=bridge=br0,model=virtio \
--graphics vnc,listen=0.0.0.0 \
--disk path=/home/disk1/vmlist/debian_vm_win1.qcow2,size=400,bus=ide,format=qcow2
安装 virtio windows 驱动
手动申请一块硬盘给该虚拟机挂上，并把下载的iso也挂载在该虚拟机上
qemu-img create -f qcow2 s1-win_1win2016_disk1.qcow2 1024G
修改$VMname的libvirt的配置文件。
virsh edit $VMname
增加如下内容：
<disk type='file' device='disk'> 
  <driver name='qemu' type='qcow2'/>
  <source file='/var/lib/windows-virtio/win7-32.img'/>
  <target dev='hda' bus='ide'/> 
</disk>
<disk type='file' device='disk'>
  <driver name='qemu' type='qcow2'/>
  <source file='/home/vmlist/
  .qcow2'/>
  <target dev='vdf' bus='virtio'/>
</disk>
<disk type='file' device='cdrom'>
  <driver name='qemu' type='raw'/>
  <source file='/var/lib/windows-virtio/virtio-win-0.1.160.iso'/>
  <target dev='hdc' bus='ide'/>
</disk>
其中cdrom是为了挂载iso文件，以便安装virtio的驱动。而fake.img是为了让win能识别需要安装virtio的驱动。 
网卡部分直接新增<model type='virtio'/>就好了 
重启虚拟机使用vnc 连接windows 从cdrom里面找到相应的驱动进行安装
更新xml文件，删掉新添加的磁盘信息，并使原disk更新为SCSI格式
<disk type='file' device='disk'> 
  <driver name='qemu' type='qcow2'/>
  <source file='/var/lib/windows-virtio/win7-32.img'/>
  <target dev='vda' bus='virtio'/> 
</disk>
改完后，用virsh命令destroy并start重启。在设备管理器发现原硬盘项和网卡已变成virtio模式，安装成功！

KVM安装windows的第二种方法
创建windows7 vm
virt-install \
--virt-type=kvm \
--name=s1-win_1 \
--ram=4096  \
--vcpus=4 \
--os-variant=windows \
--hvm \
--cdrom=/home/vmiso/windows_sever_2016.iso \
--network=bridge=br0,model=virtio \
--graphics vnc,listen=0.0.0.0 \
--disk path=/home/vmlist/debian_vm_win_1.qcow2,size=200,bus=virtio,format=qcow2

加载virtio驱动镜像：
virsh attach-disk s1-win_1 /home/vmiso/virtio-win-0.1.160.iso hda --type cdrom --mode readonly
重新加载win7系统镜像安装系统：
virsh attach-disk s1-win_1 /home/vmiso/windows_sever_2016.iso hda --type cdrom --mode readonly
成功附加磁盘
win2k16 key
CB7KF-BWN84-R7R2Y-793K2-8XDDG


创建Centos6.8 linux vm
virt-install \
--virt-type=kvm \
--name=s2-cent2 \
--ram=1024  \
--vcpus=1 \
--os-variant=rhel7 \
--hvm \
--cdrom=/home/vmiso/CentOS-7-x86_64-Minimal-1810.iso \
--network=bridge=br0,model=virtio \
--graphics vnc,listen=0.0.0.0 \
--disk path=/home/vmlist/cent_vm_2.qcow2,size=200,bus=virtio,format=qcow2


os-variant列表 https://hwguo.github.io/blog/2015/09/22/os-variants-list-of-virt-install/

使用VNC链接计算机
查看VNC端口
virsh vncdisplay centos7
通过VNC viewer连接
如果是Windows系统则直接从REALVNC官方网站 https://www.realvnc.com/download/viewer/下载VNC viewer安装，然后打开VNC viewer输入<宿主主机ip>:进行连接即可。
如果连接时闪退，可以尝试将VNC的File->Preference->Expert->ColorLevel中的Value值修改为full，保存后再次连接虚拟机即可


虚拟机克隆
virt-clone --original=s3-kvm11 \
           --name=s3-kvm14 \
           --file=/home/vmlist/debian_vm_cent14.qcow2

virt-clone --original=s2-cent_10 \
           --name=s1-cent3 \
           --file=/home/vmlist/debian_vm_cent19.qcow2		   
		   
–original后面需要是被克隆的虚拟机名，–name后面是你克隆后的虚拟机名，–file后面是克隆虚拟机的磁盘映像需要存放的位置，可以使用-o,-n,-f来简写，当原虚拟机有多个硬盘文件时，后面需要跟多个–file。注意virt-clone无法指定静态网络参数
virt-clone还可以指定uuid，mac等信息，省略的信息表示由virt自动生成。
virt-clone后面也可以只接–original参数，然后再接个–auto-clone参数，就是由virt-clone自动进行克隆

虚拟机快照管理
如果虚拟机的硬盘格式是RAW是无法支持创建虚拟机快照的必须转换成qcow2的硬盘格式才可以
硬盘格式转换方法如下
qemu-img convert -f raw -O qcow2 [input filename] [output filename] 将raw的虚拟机文件转换成qcow2的虚拟机文件
virsh edit vmfilename.xml 更改KVM虚拟机的配置文件，文件的目录在cd /etc/libvirt/qemu/
需要修改的地方是：
      <driver name='qemu' type='raw' cache='none'/>
      <source file='/data/centos6.6_1.img'/>

改为：
      <driver name='qemu' type='qcow2' cache='none'/>
      <source file='/data/centos6.6_1.qcow2'/>
保存后再次连接虚拟机即可
然后再次运行虚拟机，检查修改后的虚拟机的硬盘格式是否能成功启用，成功后使用下面命令创建虚拟机镜像
virsh snapshot-create-as VMname shotVMname
virsh snapshot-create-as s2-cent1 initstatusvhost && /
virsh snapshot-create-as s2-cent2 initstatusvhost1
克隆的虚拟机网卡无法启动的解决办法
克隆的虚拟机会出现网卡名称与原虚拟机不一样的情况，此时要修改网卡名称
修改方法：
vim /etc/udev/rules.d/70-persistent-net.rules 
修改 NAME=“eth1"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="52:54:00:0d:01:c3", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
修改network-scripts下的网卡配置文件名称
mv /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth1
修改ifcfg-eth1配置文件
vim /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth1 #需要修改的地方
HWADDR=52:54:00:0D:01:C3 #需要修改的地方 mac地址要与70-persistent-net.rules地址一样，要不然无法正确识别网卡
TYPE=Ethernet
UUID=cdc5d480-0572-4446-87b5-6b4a98c8b6b5 #此处要注释掉
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=dhcp
重启计算机
reboot

查看虚拟机快照列表
virsh snapshot-list VMname
快照文件存放的位置是在
centos6.6_1子机的快照文件在  /var/lib/libvirt/qemu/snapshot/$VMname/ 目录下
恢复快照
virsh snapshot-revert $VMname $snapshot-name
删除快照
virsh snapshot-delete $VMname $snapshot-name


虚拟机管理常用命令
强制关闭虚拟机电源：
virsh destroy VMname
启动虚拟主机：
virsh start VMname
从虚拟机列表中移除虚拟机:
virsh undefine VMname
查看所有虚拟机列表：
virsh list --all
查看虚拟机信息：
virsh dominfo VMname
暂停/挂起虚拟主机：
virsh suspend VMname
恢复暂停状态的虚拟机：
virsh resume VMname
软重启（安全重启，相当于在虚拟机内部点击重启选项）虚拟机：
virsh reboot VMname
硬重启虚拟机（不安全，有可能数据丢失，相当于强制按主机上的重启按钮）：
virsh reset VMname
移除虚拟机定义，即从虚拟机列表中移除虚拟机：
virsh undefine VMname
该命令只是删除/etc/libvirt/qemu/目录下名为centos7.xml的配置文件，并不会删除虚拟机磁盘文件
常用路径
虚拟机系统文件：/home/vmlist(自定义)
虚拟机快照文件: /var/lib/libvirt/qemu/snapshot
虚拟机配置文件：/etc/libvirt/qemu/

虚拟机重命名
进入虚拟机配置文件的文件夹
cd /etc/libvirt/qemu/
关闭虚拟机
virsh destroy $VMname
从虚拟机目录删除
virsh undefine $VMname
更改配置文件名
mv $old_vm_name.xml new_vm_name.xml
修改里面的name标签
<name>$old_vm_name</name>
<name>$new_vm_name</name>
重新编译配置文件
virsh define new_vm_name
重新打开虚拟机即可

虚拟机开机随宿主机开机自动启动
virsh autostart $vmname
取消开机自动启动
virsh autostart --disable $vmname
查看已创建的开机自动启动项
ls /etc/libvirt/qemu/autostart/


debian9挂载U盘
查看u盘的设备分区
fdisk -l
显示结果
Device     Boot Start      End  Sectors  Size Id Type
/dev/sdb1  *     8064 60555263 60547200 28.9G  c W95 FAT32 (LBA)
创建usb挂载点
mkdir /mnt/usb
挂载U盘 
mount /dev/sdb1 /mnt/usb
进入文件查看U盘
cd /mnt/usb && ls

kvm 挂载U盘
查看U盘设备:lsusb
显示结果：
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 007: ID 1604:10c0 Tascam 
Bus 001 Device 006: ID 1604:10c0 Tascam 
Bus 001 Device 005: ID 1604:10c0 Tascam 
Bus 001 Device 004: ID 1c4f:0002 SiGma Micro Keyboard TRACER Gamma Ivory
Bus 001 Device 003: ID 1c4f:0034 SiGma Micro 
Bus 001 Device 009: ID 0951:1666 Kingston Technology DataTraveler G4
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
写添加设备的配置：
virsh edit $VMname
添加下面这段 
 <hostdev mode='subsystem' type='usb' managed='yes'>
   <source>
   <vendor id='0x0951'/>
   <product id='0x1666'/>
   </source>
 </hostdev>
保存退出
virsh destroy $VMname
重新加载虚拟机配置文件
virsh define /etc/libvirt/qemu/$VMname.xml
启动虚拟机
virsh start $VMname
就完成了U盘的挂载了

监控
监控内存，CPU，进程
使用hTOP 
安装hTOP apt-get install ctop -y
运行 ctop
监控网络流量
iftop
安装 apt-get install iftop -y
运行 iftop -n

==========================================================================================================
debian9安装mysql
==========================================================================================================

安装mysql 
apt-get install mysql-server
安装 MariaDB 仍旧可以使用下面的命令，相比使用 mariadb-server，使用 mysql-server 能够保证对 MySQL 的兼容性。

修改服务监听地址
不再是修改 my.cnf 了。这次，你需要修改的是这个文件：	
vim /etc/mysql/mariadb.conf.d/50-server.cnf
修改 bind-address 的值

[mysqld]
#
# * Basic Settings
#
user            = mysql
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock
port            = 3306
basedir         = /usr
datadir         = /var/lib/mysql
tmpdir          = /tmp
lc-messages-dir = /usr/share/mysql
skip-external-locking
 
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
bind-address            = 0.0.0.0
进入mysql给 MariaDB 的 root 用户授予远程访问权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.100.%' IDENTIFIED BY 'my-new-password' WITH GRANT OPTION;
use mysql
UPDATE user SET Password = password('新密码') WHERE User = 'root';
flush privileges;
退出，重启数据库服务
systemctl restart mariadb.service


==========================================================================================================
linux 访问windows共享文件夹
==========================================================================================================
sudo mount -t cifs -o username=HJC,password=123 //192.168.15.10/pass_dict /home/windows_share
其中几个参数表示含义：
cifs：Common Internet File System，可以理解为网络文件系统。
usrname：访问共享文件夹的用户名
password：访问密码
//192.168.66.198/share：表示网络文件夹的地址，注意这里最后不能加/，
如果是//192.168.66.198/share/则会报如下错误：mount: //192.168.66.198/share/ is not a valid block device

nmap 扫描局域网
https://www.jianshu.com/p/4f5f8e09dfe0

教程出处:
http://notes.maxwi.com/2016/11/29/kvm-create-and-manage/

==========================================================================================================
linux shell 多窗口工具的安装以及使用 https://gist.github.com/ryerh/14b7c24dfd623ef8edc7
==========================================================================================================
安装 tumx
sudo apt-get install tmux -y
注意：本文内容适用于 Tmux 2.3 及以上的版本，但是绝大部分的特性低版本也都适用，鼠标支持、VI 模式、插件管理在低版本可能会与本文不兼容。

Tmux 快捷键 & 速查表
启动新会话：

tmux [new -s 会话名 -n 窗口名]
恢复会话：

tmux at [-t 会话名]
列出所有会话：

tmux ls
关闭会话：

tmux kill-session -t 会话名
关闭所有会话：

tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill
在 Tmux 中，按下 Tmux 前缀 ctrl+b，然后：
会话
:new<回车>  启动新会话
s           列出所有会话
$           重命名当前会话
窗口 (标签页)
c  创建新窗口
w  列出所有窗口
n  后一个窗口
p  前一个窗口
f  查找窗口
,  重命名当前窗口
&  关闭当前窗口
调整窗口排序
swap-window -s 3 -t 1  交换 3 号和 1 号窗口
swap-window -t 1       交换当前和 1 号窗口
move-window -t 1       移动当前窗口到 1 号
窗格（分割窗口）
%  垂直分割
"  水平分割
o  交换窗格
x  关闭窗格
⍽  左边这个符号代表空格键 - 切换布局
q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格
{ 与上一个窗格交换位置
} 与下一个窗格交换位置
z 切换窗格最大化/最小化
同步窗格
这么做可以切换到想要的窗口，输入 Tmux 前缀和一个冒号呼出命令提示行，然后输入：

:setw synchronize-panes
你可以指定开或关，否则重复执行命令会在两者间切换。 这个选项值针对某个窗口有效，不会影响别的会话和窗口。 完事儿之后再次执行命令来关闭。帮助

调整窗格尺寸
如果你不喜欢默认布局，可以重调窗格的尺寸。虽然这很容易实现，但一般不需要这么干。这几个命令用来调整窗格：

PREFIX : resize-pane -D          当前窗格向下扩大 1 格
PREFIX : resize-pane -U          当前窗格向上扩大 1 格
PREFIX : resize-pane -L          当前窗格向左扩大 1 格
PREFIX : resize-pane -R          当前窗格向右扩大 1 格
PREFIX : resize-pane -D 20       当前窗格向下扩大 20 格
PREFIX : resize-pane -t 2 -L 20  编号为 2 的窗格向左扩大 20 格
文本复制模式：
按下 PREFIX-[ 进入文本复制模式。可以使用方向键在屏幕中移动光标。默认情况下，方向键是启用的。在配置文件中启用 Vim 键盘布局来切换窗口、调整窗格大小。Tmux 也支持 Vi 模式。要是想启用 Vi 模式，只需要把下面这一行添加到 .tmux.conf 中：

setw -g mode-keys vi
启用这条配置后，就可以使用 h、j、k、l 来移动光标了。

想要退出文本复制模式的话，按下回车键就可以了。然后按下 PREFIX-] 粘贴刚才复制的文本。

一次移动一格效率低下，在 Vi 模式启用的情况下，可以辅助一些别的快捷键高效工作。

例如，可以使用 w 键逐词移动，使用 b 键逐词回退。使用 f 键加上任意字符跳转到当前行第一次出现该字符的位置，使用 F 键达到相反的效果。

vi             emacs        功能
^              M-m          反缩进
Escape         C-g          清除选定内容
Enter          M-w          复制选定内容
j              Down         光标下移
h              Left         光标左移
l              Right        光标右移
L                           光标移到尾行
M              M-r          光标移到中间行
H              M-R          光标移到首行
k              Up           光标上移
d              C-u          删除整行
D              C-k          删除到行末
$              C-e          移到行尾
:              g            前往指定行
C-d            M-Down       向下滚动半屏
C-u            M-Up         向上滚动半屏
C-f            Page down    下一页
w              M-f          下一个词
p              C-y          粘贴
C-b            Page up      上一页
b              M-b          上一个词
q              Escape       退出
C-Down or J    C-Down       向下翻
C-Up or K      C-Up         向下翻
n              n            继续搜索
?              C-r          向前搜索
/              C-s          向后搜索
0              C-a          移到行首
Space          C-Space      开始选中
               C-t          字符调序
杂项：
d  退出 tmux（tmux 仍在后台运行）
t  窗口中央显示一个数字时钟
?  列出所有快捷键
:  命令提示符
配置选项：
# 鼠标支持 - 设置为 on 来启用鼠标(与 2.1 之前的版本有区别，请自行查阅 man page)
* set -g mouse on

# 设置默认终端模式为 256color
set -g default-terminal "screen-256color"

# 启用活动警告
setw -g monitor-activity on
set -g visual-activity on

# 居中窗口列表
set -g status-justify centre

# 最大化/恢复窗格
unbind Up bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp
参考配置文件（~/.tmux.conf）：
下面这份配置是我使用 Tmux 几年来逐渐精简后的配置，请自取。

# -----------------------------------------------------------------------------
# Tmux 基本配置 - 要求 Tmux >= 2.3
# 如果不想使用插件，只需要将此节的内容写入 ~/.tmux.conf 即可
# -----------------------------------------------------------------------------

# C-b 和 VIM 冲突，修改 Prefix 组合键为 Control-Z，按键距离近
set -g prefix C-z

set -g base-index         1     # 窗口编号从 1 开始计数
set -g display-panes-time 10000 # PREFIX-Q 显示编号的驻留时长，单位 ms
set -g mouse              on    # 开启鼠标
set -g pane-base-index    1     # 窗格编号从 1 开始计数
set -g renumber-windows   on    # 关掉某个窗口后，编号重排

setw -g allow-rename      off   # 禁止活动进程修改窗口名
setw -g automatic-rename  off   # 禁止自动命名新窗口
setw -g mode-keys         vi    # 进入复制模式的时候使用 vi 键位（默认是 EMACS）

# -----------------------------------------------------------------------------
# 使用插件 - via tpm
#   1. 执行 git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#   2. 执行 bash ~/.tmux/plugins/tpm/bin/install_plugins
# -----------------------------------------------------------------------------

setenv -g TMUX_PLUGIN_MANAGER_PATH '~/.tmux/plugins'

# 推荐的插件（请去每个插件的仓库下读一读使用教程）
set -g @plugin 'seebi/tmux-colors-solarized'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tpm'

# tmux-resurrect
set -g @resurrect-dir '~/.tmux/resurrect'

# tmux-prefix-highlight
set -g status-right '#{prefix_highlight} #H | %a %Y-%m-%d %H:%M'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=white,bg=blue'

# 初始化 TPM 插件管理器 (放在配置文件的最后)
run '~/.tmux/plugins/tpm/tpm'

# -----------------------------------------------------------------------------
# 结束
# -----------------------------------------------------------------------------

==========================================================================================================
debian 安装,配置，使用git
==========================================================================================================
安装git:
apt-get install git -y
设置git:
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
创建版本库:
$ mkdir learngit
$ cd learngit
$ pwd
通过git init命令把这个目录变成Git可以管理的仓库：
$ git init
本地git仓库提交代码：
git add $filename
提交说明
git commit -m "说明更改过了什么"
生产本机秘钥
ssh-keygen -t rsa
生产的秘钥文件为id_rsa.pub，用everthing搜索一下就好了
GitHub 上添加 SSH key
打开github，github上settings里面的SSH and GPG keys
然后New SSH
Title位置不需要填
粘贴
Add SSH key
测试连接 ssh -T git@github.com
在第一次测试时会弹出警告，需要填写yes，然后回车

从本地git仓库上传到github仓库
git remote add origin git@github.com:yellowaug/word-dict.git
git push -u origin master

git创建新分支，并将分支上传到Github
clone github上的项目
查看本地所有分支
git branch -a
查看远程分支
git branch -r
本地创建新的分支
git branch [branch name]
切换到新的分支
git checkout [branch name]
将新分支推送到github
git push origin [branch name]
删除本地分支
git branch -d [branch name]
删除远程分支
git push origin :[branch name]

==========================================================================================================
git搭建服务器 https://www.haorooms.com/post/centos_git
==========================================================================================================
想了一下，本文标题是CentOS7搭建git 服务器，还是讲一下原生方式搭建git服务器吧！

第一步，安装git：

$ yum install git
第二步，创建一个git用户，用来运行git服务：

$ sudo adduser git
第三步，创建证书登录：

收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到

/home/git/.ssh/authorized_keys
文件里，一行一个。（也是通过这个方法关联git公钥的）

第四步，初始化Git仓库：

先选定一个目录作为Git仓库，假定是/srv/haorooms.git，在/srv目录下输入命令：

$ sudo git init --bare haorooms.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git(git用户)：

$ sudo chown -R git:git haorooms.git
第五步，禁用shell登录：

出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

git:x:1001:1001:,,,:/home/git:/bin/bash
改为：

git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：

现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

$ git clone git@server:/srv/haorooms.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

这个方式的缺点我最上面写过了，git是全路径，假如你是放到/home/www/git/haorooms.git，那个clone地址就是：

 $ git clone git@server:/home/www/git/haorooms.git

==========================================================================================================
 gitlab私有化仓库搭建
==========================================================================================================
 安装需要的环境
 https://www.cnblogs.com/youzhibing/p/12487043.ht
 gitlab修改默认登录端口的方法
 https://www.jianshu.com/p/5d8f4fc67379
 gitlab修改默认SSH端口的方法
 https://cloud.tencent.com/developer/article/1114666
 gitlab修改默认的仓库存储目录及数据迁移
 https://blog.csdn.net/liuli905306022/article/details/89512896
gitlab备份，自动备份脚本及命令行
自动备份脚本
https://www.jianshu.com/p/c33e76c4db03
gitlab备份命令行
https://blog.csdn.net/qq446282412/article/details/77070977

==========================================================================================================
gitlab 自动备份脚本
==========================================================================================================
#!/bin/bash

#Gitlab 备份地址
LocalBackDir=/home/backgitlabdata

#服务机gitlab配置文件地址
#正式环境地址：
ConfigDir=/etc/gitlab/gitlab.rb

#nginx配置文件地址
#正式环境地址：NginxDir=/home/dgd/gitlab/data/nginx/conf

#邮件配置地址
#MailDir=/etc/postfix/main.cf

#Backup server 存储路径
RemoteBackDir=/home/gitlabback

#远程备份使用用户及端口
RemoteUser=root
RemotePort=22

#备份服务器IP
RemoteIP=10.12.2.50

#以当前时间戳创建备份目录
bakname=$(date -d "today" +"%Y%m%d_%H%M%S")
BakDir=$LocalBackDir/$bakname
mkdir $BakDir

#备份日志文件
LogFile=$LocalBackDir/remote_backup.log

#新建备份日志文件
touch $LogFile

#记录配置文件备份日志
echo "Gitlab configure file auto backup at local server, start at  $(date +"%Y-%m-%d %H:%M:%S")" >>  $LogFile
echo "--------------------------------------------------------------------------" >> $LogFile

#拷贝配置文件
cp $ConfigDir $BakDir >> $LogFile 2>&1
#cp -r $NginxDir $BakDir >> $LogFile 2>&1
#cp $MailDir $BakDir >> $LogFile 2>&1

#记录本地生成gitlab备份日志
echo "Gitlab auto backup at local server, start at  $(date +"%Y-%m-%d %H:%M:%S")" >>  $LogFile
echo "--------------------------------------------------------------------------" >> $LogFile

#执行gitlab本地备份
#docker exec  gitlab_ce_zh gitlab-rake gitlab:backup:create >> $LogFile 2>&1
gitlab-rake gitlab:backup:create >> $LogFile 2>&1

# $?符号显示上一条命令的返回值，如果为0则代表执行成功，其他表示失败
if [ $? -eq 0 ];then
   #追加日志到日志文件
   echo "--------------------------------Success!-------------------------------" >> $LogFile
   echo "Gitlab auto backup at local server, end at $(date +"%Y-%m-%d %H:%M:%S")" >> $LogFile
else
   #追加日志到日志文件
   echo "--------------------------------Failed!----------------------------------" >> $LogFile
   echo "Gitlab auto backup at local server failed at $(date +"%Y-%m-%d %H:%M:%S")" >> $LogFile
fi


#查找本地备份目录修改时间为10分钟以内且后缀为.tar的Gitlab备份文件
Backfile_Send_To_Remote=`find $LocalBackDir -type f  -mmin -10 -name '*.tar'` >> $LogFile 2>&1

#移动生成的备份文件到配置文件备份地址
mv -bfu $Backfile_Send_To_Remote $BakDir 


#记录备份日志
echo "$(date +"%Y-%m-%d %H:%M:%S") Gitlab auto backup to remote server." >> $LogFile
echo "--------------------------------------------" >> $LogFile

#打印每次备份的档案名
echo "The files need send to remote server is: $Backfile_Send_To_Remote" >> $LogFile

# 本地传输Gitlab备份档案到远程
scp -r $RemotePort $BakDir $RemoteUser@$RemoteIP:$RemoteBackDir

# 备份结果追加到备份日志
if [ $? -eq 0 ];then
  echo ""
  echo "$(date +"%Y-%m-%d %H:%M:%S") Gitlab Remote Backup Succeed!" >> $LogFile
else
  echo "$(date +"%Y-%m-%d %H:%M:%S") Gitlab Remote Backup Failed!" >> $LogFile
fi

==========================================================================================================
gitlab 自动删除备份脚本
==========================================================================================================
find /data -mtime +7 -type d -name "*" -exec rm -rf {} \;
# 寻找并删除/data目录下内容修改时间（mtime）为7天以前的文件夹（-type d），并删除（rm -rf）
